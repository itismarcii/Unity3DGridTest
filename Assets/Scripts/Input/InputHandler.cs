//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/InputHandler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputHandler: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputHandler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputHandler"",
    ""maps"": [
        {
            ""name"": ""TouchWorld"",
            ""id"": ""a5ffc0a4-5842-4183-96e0-8dd9ca4dfe22"",
            ""actions"": [
                {
                    ""name"": ""MainAction"",
                    ""type"": ""Button"",
                    ""id"": ""de239ee0-e436-471a-977c-e40e469a3f98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""fd4c76a8-c574-4274-b798-d72d8e1fbde1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""90ed90d4-3e01-4a2e-99b5-f41a80831379"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""110873b3-45d1-4516-9e85-7835a174fdc5"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.125)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3607aa3f-bb5b-4d34-87c2-5dc2b7149b92"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a299e933-1623-4ecd-bfe9-009e4a0e7476"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold(duration=0.8,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchWorld
        m_TouchWorld = asset.FindActionMap("TouchWorld", throwIfNotFound: true);
        m_TouchWorld_MainAction = m_TouchWorld.FindAction("MainAction", throwIfNotFound: true);
        m_TouchWorld_SecondaryAction = m_TouchWorld.FindAction("SecondaryAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchWorld
    private readonly InputActionMap m_TouchWorld;
    private List<ITouchWorldActions> m_TouchWorldActionsCallbackInterfaces = new List<ITouchWorldActions>();
    private readonly InputAction m_TouchWorld_MainAction;
    private readonly InputAction m_TouchWorld_SecondaryAction;
    public struct TouchWorldActions
    {
        private @InputHandler m_Wrapper;
        public TouchWorldActions(@InputHandler wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainAction => m_Wrapper.m_TouchWorld_MainAction;
        public InputAction @SecondaryAction => m_Wrapper.m_TouchWorld_SecondaryAction;
        public InputActionMap Get() { return m_Wrapper.m_TouchWorld; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchWorldActions set) { return set.Get(); }
        public void AddCallbacks(ITouchWorldActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchWorldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchWorldActionsCallbackInterfaces.Add(instance);
            @MainAction.started += instance.OnMainAction;
            @MainAction.performed += instance.OnMainAction;
            @MainAction.canceled += instance.OnMainAction;
            @SecondaryAction.started += instance.OnSecondaryAction;
            @SecondaryAction.performed += instance.OnSecondaryAction;
            @SecondaryAction.canceled += instance.OnSecondaryAction;
        }

        private void UnregisterCallbacks(ITouchWorldActions instance)
        {
            @MainAction.started -= instance.OnMainAction;
            @MainAction.performed -= instance.OnMainAction;
            @MainAction.canceled -= instance.OnMainAction;
            @SecondaryAction.started -= instance.OnSecondaryAction;
            @SecondaryAction.performed -= instance.OnSecondaryAction;
            @SecondaryAction.canceled -= instance.OnSecondaryAction;
        }

        public void RemoveCallbacks(ITouchWorldActions instance)
        {
            if (m_Wrapper.m_TouchWorldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchWorldActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchWorldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchWorldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchWorldActions @TouchWorld => new TouchWorldActions(this);
    public interface ITouchWorldActions
    {
        void OnMainAction(InputAction.CallbackContext context);
        void OnSecondaryAction(InputAction.CallbackContext context);
    }
}
